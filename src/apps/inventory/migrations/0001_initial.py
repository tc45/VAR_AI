# Generated by Django 4.2.11 on 2025-03-10 14:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('projects', '0002_remove_project_description_project_created_by_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The hostname or identifier of the device', max_length=255, verbose_name='Device Name')),
                ('device_type', models.CharField(choices=[('cisco_ios', 'Cisco IOS'), ('cisco_asa', 'Cisco ASA'), ('cisco_nexus', 'Cisco Nexus'), ('fortigate', 'FortiGate'), ('fortiswitch', 'FortiSwitch'), ('junos', 'JunOS'), ('other', 'Other')], default='other', help_text='The type/platform of the device', max_length=20, verbose_name='Device Type')),
                ('model', models.CharField(blank=True, help_text='The hardware model of the device', max_length=100, verbose_name='Model')),
                ('firmware_version', models.CharField(blank=True, help_text='The firmware/OS version running on the device', max_length=100, verbose_name='Firmware Version')),
                ('serial_number', models.CharField(blank=True, help_text='The serial number of the device', max_length=100, verbose_name='Serial Number')),
                ('management_ip', models.GenericIPAddressField(blank=True, help_text='The management IP address of the device', null=True, verbose_name='Management IP')),
                ('interface_count', models.PositiveIntegerField(default=0, help_text='Total number of interfaces on the device', verbose_name='Interface Count')),
                ('route_count', models.PositiveIntegerField(default=0, help_text='Total number of routes in the routing table', verbose_name='Route Count')),
                ('acl_count', models.PositiveIntegerField(default=0, help_text='Total number of ACL rules configured', verbose_name='ACL Count')),
                ('sfp_count', models.PositiveIntegerField(default=0, help_text='Total number of SFP modules installed', verbose_name='SFP Count')),
                ('ipsec_tunnel_count', models.PositiveIntegerField(default=0, help_text='Total number of configured IPSec tunnels', verbose_name='IPSec Tunnel Count')),
                ('routing_protocols', models.JSONField(default=dict, help_text='JSON object containing routing protocol details', verbose_name='Routing Protocols')),
                ('last_config_snapshot', models.DateTimeField(blank=True, help_text='When the last configuration snapshot was taken', null=True, verbose_name='Last Config Snapshot')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the device', verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the device was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the device was last updated', verbose_name='Updated At')),
                ('created_by', models.ForeignKey(help_text='User who created this device', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_devices', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('project', models.ForeignKey(help_text='The project this device belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='projects.project', verbose_name='Project')),
            ],
            options={
                'verbose_name': 'Device',
                'verbose_name_plural': 'Devices',
                'ordering': ['project', 'name'],
            },
        ),
        migrations.CreateModel(
            name='VRF',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='VRF Name')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='Description')),
                ('route_distinguisher', models.CharField(blank=True, max_length=100, verbose_name='Route Distinguisher')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_vrfs', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vrfs', to='inventory.device', verbose_name='Device')),
            ],
            options={
                'verbose_name': 'VRF',
                'verbose_name_plural': 'VRFs',
                'ordering': ['device', 'name'],
                'unique_together': {('device', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ACL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='ACL Name')),
                ('type', models.CharField(choices=[('standard', 'Standard'), ('extended', 'Extended'), ('other', 'Other')], default='extended', max_length=20, verbose_name='Type')),
                ('rules', models.JSONField(default=dict, verbose_name='Rules')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_acls', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acls', to='inventory.device', verbose_name='Device')),
            ],
            options={
                'verbose_name': 'ACL',
                'verbose_name_plural': 'ACLs',
                'ordering': ['device', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RouteTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('routes', models.JSONField(default=dict, verbose_name='Routes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_route_tables', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_tables', to='inventory.device', verbose_name='Device')),
                ('vrf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='route_tables', to='inventory.vrf', verbose_name='VRF')),
            ],
            options={
                'verbose_name': 'Route Table',
                'verbose_name_plural': 'Route Tables',
                'ordering': ['device', 'vrf__name'],
                'unique_together': {('device', 'vrf')},
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('interface', 'Interface'), ('acl', 'Access Control List'), ('vrf', 'Virtual Routing and Forwarding'), ('route', 'Route'), ('ipsec_tunnel', 'IPSec Tunnel'), ('sfp', 'SFP Module'), ('other', 'Other')], help_text='The type of inventory item', max_length=20, verbose_name='Item Type')),
                ('name', models.CharField(help_text='The name or identifier of the item', max_length=255, verbose_name='Item Name')),
                ('description', models.TextField(blank=True, help_text='Description of the inventory item', verbose_name='Description')),
                ('data', models.JSONField(help_text='JSON object containing item-specific data', verbose_name='Item Data')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this item is currently active', verbose_name='Is Active')),
                ('last_seen', models.DateTimeField(blank=True, help_text='When this item was last observed in device configuration', null=True, verbose_name='Last Seen')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the item was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the item was last updated', verbose_name='Updated At')),
                ('created_by', models.ForeignKey(help_text='User who created this inventory item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_inventory_items', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('device', models.ForeignKey(help_text='The device this inventory item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='inventory.device', verbose_name='Device')),
            ],
            options={
                'verbose_name': 'Inventory Item',
                'verbose_name_plural': 'Inventory Items',
                'ordering': ['device', 'item_type', 'name'],
                'indexes': [models.Index(fields=['device', 'item_type', 'name'], name='inventory_i_device__479e0b_idx'), models.Index(fields=['item_type'], name='inventory_i_item_ty_72ee4a_idx')],
                'unique_together': {('device', 'item_type', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Interface Name')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='Description')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('subnet_mask', models.CharField(blank=True, max_length=15, verbose_name='Subnet Mask')),
                ('mac_address', models.CharField(blank=True, max_length=17, verbose_name='MAC Address')),
                ('is_up', models.BooleanField(default=True, verbose_name='Is Up')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Is Enabled')),
                ('speed', models.IntegerField(blank=True, null=True, verbose_name='Speed (Mbps)')),
                ('mtu', models.IntegerField(blank=True, null=True, verbose_name='MTU')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_interfaces', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interfaces', to='inventory.device', verbose_name='Device')),
            ],
            options={
                'verbose_name': 'Interface',
                'verbose_name_plural': 'Interfaces',
                'ordering': ['device', 'name'],
                'unique_together': {('device', 'name')},
            },
        ),
        migrations.AddIndex(
            model_name='device',
            index=models.Index(fields=['project', 'name'], name='inventory_d_project_e1696d_idx'),
        ),
        migrations.AddIndex(
            model_name='device',
            index=models.Index(fields=['device_type'], name='inventory_d_device__82f1fb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='device',
            unique_together={('project', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='acl',
            unique_together={('device', 'name')},
        ),
    ]
